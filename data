import os
import zipfile
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score

# Unzipping the file
uploaded_file = '/mnt/data/data.zip'
unzip_dir = '/mnt/data/unzipped_data'
os.makedirs(unzip_dir, exist_ok=True)

with zipfile.ZipFile(uploaded_file, 'r') as zip_ref:
    zip_ref.extractall(unzip_dir)

# List extracted files
extracted_files = os.listdir(unzip_dir)
print("Extracted files:", extracted_files)

# Function to determine optimal clusters using elbow method
def elbow_method(data, max_clusters=10):
    distortions = []
    for k in range(1, max_clusters + 1):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(data)
        distortions.append(kmeans.inertia_)

    plt.figure(figsize=(8, 5))
    plt.plot(range(1, max_clusters + 1), distortions, marker='o')
    plt.title('Elbow Method')
    plt.xlabel('Number of clusters')
    plt.ylabel('Distortion')
    plt.show()

# Process each file
for file_name in extracted_files:
    file_path = os.path.join(unzip_dir, file_name)

    # Check the file extension
    if file_name.endswith('.csv'):
        data = pd.read_csv(file_path)
        print(f"\nProcessing file: {file_name}")
        print(f"Data shape: {data.shape}")

        if data.shape[1] > 2:
            print("Reducing dimensions using PCA...")
            pca = PCA(n_components=2, random_state=42)
            data_reduced = pca.fit_transform(data)
        else:
            data_reduced = data.values

        print("Finding optimal number of clusters using elbow method...")
        elbow_method(data_reduced)

        # Applying K-Means
        optimal_clusters = int(input("Enter the optimal number of clusters for {}: ".format(file_name)))
        kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
        clusters = kmeans.fit_predict(data_reduced)

        # Visualize the clusters
        plt.figure(figsize=(8, 5))
        plt.scatter(data_reduced[:, 0], data_reduced[:, 1], c=clusters, cmap='viridis', s=50)
        plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', marker='X')
        plt.title(f'K-Means Clustering for {file_name}')
        plt.xlabel('Component 1')
        plt.ylabel('Component 2')
        plt.show()
